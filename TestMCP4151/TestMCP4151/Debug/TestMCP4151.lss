
TestMCP4151.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  00000156  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000102  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  00000156  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000188  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000078  00000000  00000000  000001c8  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000a3a  00000000  00000000  00000240  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 0000090a  00000000  00000000  00000c7a  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000003b3  00000000  00000000  00001584  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000000a4  00000000  00000000  00001938  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000470  00000000  00000000  000019dc  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    0000006d  00000000  00000000  00001e4c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000048  00000000  00000000  00001eb9  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	45 c0       	rjmp	.+138    	; 0x8c <__ctors_end>
   2:	00 00       	nop
   4:	4b c0       	rjmp	.+150    	; 0x9c <__bad_interrupt>
   6:	00 00       	nop
   8:	49 c0       	rjmp	.+146    	; 0x9c <__bad_interrupt>
   a:	00 00       	nop
   c:	47 c0       	rjmp	.+142    	; 0x9c <__bad_interrupt>
   e:	00 00       	nop
  10:	45 c0       	rjmp	.+138    	; 0x9c <__bad_interrupt>
  12:	00 00       	nop
  14:	43 c0       	rjmp	.+134    	; 0x9c <__bad_interrupt>
  16:	00 00       	nop
  18:	41 c0       	rjmp	.+130    	; 0x9c <__bad_interrupt>
  1a:	00 00       	nop
  1c:	3f c0       	rjmp	.+126    	; 0x9c <__bad_interrupt>
  1e:	00 00       	nop
  20:	3d c0       	rjmp	.+122    	; 0x9c <__bad_interrupt>
  22:	00 00       	nop
  24:	3b c0       	rjmp	.+118    	; 0x9c <__bad_interrupt>
  26:	00 00       	nop
  28:	39 c0       	rjmp	.+114    	; 0x9c <__bad_interrupt>
  2a:	00 00       	nop
  2c:	37 c0       	rjmp	.+110    	; 0x9c <__bad_interrupt>
  2e:	00 00       	nop
  30:	35 c0       	rjmp	.+106    	; 0x9c <__bad_interrupt>
  32:	00 00       	nop
  34:	33 c0       	rjmp	.+102    	; 0x9c <__bad_interrupt>
  36:	00 00       	nop
  38:	31 c0       	rjmp	.+98     	; 0x9c <__bad_interrupt>
  3a:	00 00       	nop
  3c:	2f c0       	rjmp	.+94     	; 0x9c <__bad_interrupt>
  3e:	00 00       	nop
  40:	2d c0       	rjmp	.+90     	; 0x9c <__bad_interrupt>
  42:	00 00       	nop
  44:	2b c0       	rjmp	.+86     	; 0x9c <__bad_interrupt>
  46:	00 00       	nop
  48:	29 c0       	rjmp	.+82     	; 0x9c <__bad_interrupt>
  4a:	00 00       	nop
  4c:	27 c0       	rjmp	.+78     	; 0x9c <__bad_interrupt>
  4e:	00 00       	nop
  50:	25 c0       	rjmp	.+74     	; 0x9c <__bad_interrupt>
  52:	00 00       	nop
  54:	23 c0       	rjmp	.+70     	; 0x9c <__bad_interrupt>
  56:	00 00       	nop
  58:	21 c0       	rjmp	.+66     	; 0x9c <__bad_interrupt>
  5a:	00 00       	nop
  5c:	1f c0       	rjmp	.+62     	; 0x9c <__bad_interrupt>
  5e:	00 00       	nop
  60:	1d c0       	rjmp	.+58     	; 0x9c <__bad_interrupt>
  62:	00 00       	nop
  64:	1b c0       	rjmp	.+54     	; 0x9c <__bad_interrupt>
  66:	00 00       	nop
  68:	19 c0       	rjmp	.+50     	; 0x9c <__bad_interrupt>
  6a:	00 00       	nop
  6c:	17 c0       	rjmp	.+46     	; 0x9c <__bad_interrupt>
  6e:	00 00       	nop
  70:	15 c0       	rjmp	.+42     	; 0x9c <__bad_interrupt>
  72:	00 00       	nop
  74:	13 c0       	rjmp	.+38     	; 0x9c <__bad_interrupt>
  76:	00 00       	nop
  78:	11 c0       	rjmp	.+34     	; 0x9c <__bad_interrupt>
  7a:	00 00       	nop
  7c:	0f c0       	rjmp	.+30     	; 0x9c <__bad_interrupt>
  7e:	00 00       	nop
  80:	0d c0       	rjmp	.+26     	; 0x9c <__bad_interrupt>
  82:	00 00       	nop
  84:	0b c0       	rjmp	.+22     	; 0x9c <__bad_interrupt>
  86:	00 00       	nop
  88:	09 c0       	rjmp	.+18     	; 0x9c <__bad_interrupt>
	...

0000008c <__ctors_end>:
  8c:	11 24       	eor	r1, r1
  8e:	1f be       	out	0x3f, r1	; 63
  90:	cf ef       	ldi	r28, 0xFF	; 255
  92:	d0 e4       	ldi	r29, 0x40	; 64
  94:	de bf       	out	0x3e, r29	; 62
  96:	cd bf       	out	0x3d, r28	; 61
  98:	02 d0       	rcall	.+4      	; 0x9e <main>
  9a:	31 c0       	rjmp	.+98     	; 0xfe <_exit>

0000009c <__bad_interrupt>:
  9c:	b1 cf       	rjmp	.-158    	; 0x0 <__vectors>

0000009e <main>:


int main(void)
{
	// Initialiser le MCP4151
	MCP4151_Init();
  9e:	03 d0       	rcall	.+6      	; 0xa6 <MCP4151_Init>

	while (1)
	{
		// Régler la position du wiper pour contrôler la résistance
		
		MCP4151_SetWiper(128);
  a0:	80 e8       	ldi	r24, 0x80	; 128
  a2:	09 d0       	rcall	.+18     	; 0xb6 <MCP4151_SetWiper>
  a4:	fd cf       	rjmp	.-6      	; 0xa0 <main+0x2>

000000a6 <MCP4151_Init>:

// Initialiser le MCP4151
void MCP4151_Init(void)
{
	// Configurer PD4 (CS) comme sortie
	DDRD |= (1 << MCP4151_CS_PIN);
  a6:	8a b1       	in	r24, 0x0a	; 10
  a8:	80 61       	ori	r24, 0x10	; 16
  aa:	8a b9       	out	0x0a, r24	; 10
	// Initialiser CS à HIGH (désactivé)
	PORTD |= (1 << MCP4151_CS_PIN);
  ac:	8b b1       	in	r24, 0x0b	; 11
  ae:	80 61       	ori	r24, 0x10	; 16
  b0:	8b b9       	out	0x0b, r24	; 11

	// Initialiser le SPI
	SPI_MasterInit_Only_MOSI();
  b2:	0f c0       	rjmp	.+30     	; 0xd2 <SPI_MasterInit_Only_MOSI>
  b4:	08 95       	ret

000000b6 <MCP4151_SetWiper>:
}

// Régler la position du wiper
void MCP4151_SetWiper(uint8_t value)
{
  b6:	cf 93       	push	r28
  b8:	c8 2f       	mov	r28, r24
	{
		value = 255; // Limiter la valeur à 255 (max)
	}

	// Activer le MCP4151 (CS à LOW)
	PORTD &= ~(1 << MCP4151_CS_PIN);
  ba:	8b b1       	in	r24, 0x0b	; 11
  bc:	8f 7e       	andi	r24, 0xEF	; 239
  be:	8b b9       	out	0x0b, r24	; 11

	// Envoyer la commande pour régler le wiper
	SPI_MasterTransmit(0x00);  // MSB : Commande pour le registre Wiper
  c0:	80 e0       	ldi	r24, 0x00	; 0
  c2:	17 d0       	rcall	.+46     	; 0xf2 <SPI_MasterTransmit>
	SPI_MasterTransmit(value); // LSB : Position du wiper
  c4:	8c 2f       	mov	r24, r28
  c6:	15 d0       	rcall	.+42     	; 0xf2 <SPI_MasterTransmit>

	// Désactiver le MCP4151 (CS à HIGH)
	PORTD |= (1 << MCP4151_CS_PIN);
  c8:	8b b1       	in	r24, 0x0b	; 11
  ca:	80 61       	ori	r24, 0x10	; 16
  cc:	8b b9       	out	0x0b, r24	; 11
}
  ce:	cf 91       	pop	r28
  d0:	08 95       	ret

000000d2 <SPI_MasterInit_Only_MOSI>:
#include "SPI.h"

void SPI_MasterInit_Only_MOSI(void)
{
	// Set MOSI and SCK output, 
	SET_BIT(DDRB,DDB7); // SCK
  d2:	84 b1       	in	r24, 0x04	; 4
  d4:	80 68       	ori	r24, 0x80	; 128
  d6:	84 b9       	out	0x04, r24	; 4
	SET_BIT(DDRB,DDB5); // MOSI
  d8:	84 b1       	in	r24, 0x04	; 4
  da:	80 62       	ori	r24, 0x20	; 32
  dc:	84 b9       	out	0x04, r24	; 4
	CLR_BIT(DDRB,DDB4); // SS MASTER (sera fixé à 5V)
  de:	84 b1       	in	r24, 0x04	; 4
  e0:	8f 7e       	andi	r24, 0xEF	; 239
  e2:	84 b9       	out	0x04, r24	; 4
		
	// Enable SPI, Master, mode 0-0, set clock rate fck/8 
	SPCR |= (1<<SPE)|(1<<MSTR)|(0<<CPOL)|(0<<CPHA)|(0<<SPR1)|(1<<SPR0);
  e4:	8c b5       	in	r24, 0x2c	; 44
  e6:	81 65       	ori	r24, 0x51	; 81
  e8:	8c bd       	out	0x2c, r24	; 44
	SET_BIT(SPSR, SPI2X);
  ea:	8d b5       	in	r24, 0x2d	; 45
  ec:	81 60       	ori	r24, 0x01	; 1
  ee:	8d bd       	out	0x2d, r24	; 45
  f0:	08 95       	ret

000000f2 <SPI_MasterTransmit>:
}

uint8_t SPI_MasterTransmit(uint8_t Data)
{
    SPDR = Data;
  f2:	8e bd       	out	0x2e, r24	; 46
    //Wait until transmission complete
    while(!(SPSR & (1<<SPIF) ));
  f4:	0d b4       	in	r0, 0x2d	; 45
  f6:	07 fe       	sbrs	r0, 7
  f8:	fd cf       	rjmp	.-6      	; 0xf4 <SPI_MasterTransmit+0x2>
    // Return received data
    return(SPDR);
  fa:	8e b5       	in	r24, 0x2e	; 46
  fc:	08 95       	ret

000000fe <_exit>:
  fe:	f8 94       	cli

00000100 <__stop_program>:
 100:	ff cf       	rjmp	.-2      	; 0x100 <__stop_program>
